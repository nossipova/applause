«IMPORT org::applause::lang::applauseDsl»
«IMPORT java::lang»

«EXTENSION templates::GeneratorExtensions»
«EXTENSION templates::MetamodelExtensions»
«EXTENSION templates::ProviderExtension»

«DEFINE main FOR Application-»
«EXPAND providerFactory FOR this»
«EXPAND providerClass FOREACH this.providersWithImplementation()»
«ENDDEFINE»

«DEFINE providerFactory FOR Application»
«FILE providerFactoryFileName()»
package «packageName()»;

import static de.itemis.base.StringUtils.*;

public class «providerFactoryClassName()» {
«EXPAND providerFactoryMethod FOREACH providersWithImplementation()»
}
«ENDFILE»
«ENDDEFINE»

«DEFINE providerFactoryMethod FOR ContentProvider»
	public static «providerClassName()» «providerClassName().getterName()»(«parameter==null?"":parameter.description.type.name + " " + parameter.name») {
		String feedUrl = «this.url.expression("")»;
		return new «providerClassName()»(feedUrl);
	} 
«ENDDEFINE»

«DEFINE providerClass FOR ContentProvider»
«FILE this.providerFileName()»
package «packageName()»;

import java.io.Reader;
import java.util.ArrayList;
import java.util.List;

import org.simpleframework.xml.Element;
import org.simpleframework.xml.ElementList;
import org.simpleframework.xml.Root;
import org.simpleframework.xml.Serializer;
import org.simpleframework.xml.core.Persister;

import de.itemis.base.«this.providerBaseClassName()»;

public class «this.providerClassName()» extends «this.providerBaseClassName()»<«this.providerType()»> {
	
	private static final long serialVersionUID = 1L;

	public «this.providerClassName()»(String feedUrl) {
		super(feedUrl);
	}
	
	«EXPAND selection(this) FOR this.selection»
	
	«IF many»
	@Override
	protected List<«this.providerType()»> extractItems(Reader reader) throws Exception {
		Serializer serializer = new Persister();
		«topLevelClass()» root = serializer.read(«topLevelClass()».class, reader);
		return root.«selectionToGetters()»;
	}
	«ELSE»
	protected «this.providerType()» extractItem(Reader reader) throws Exception {
		Serializer serializer = new Persister();
		«topLevelClass()» root = serializer.read(«topLevelClass()».class, reader);
		return root.«selectionToGetters()»;
	}
	«ENDIF»
	
}
«ENDFILE»
«ENDDEFINE»

«DEFINE selection(ContentProvider provider)  FOR ScalarExpression»
«ENDDEFINE»

«DEFINE selection(ContentProvider provider) FOR StringLiteral»
	«EXPAND interimClass(this.value.split("\\.")) FOR provider»
«ENDDEFINE»

«DEFINE interimClass(List[String] path) FOR ContentProvider»
	@Root(strict=false)
	public static class «path.self().className()» {
		«IF path.isChildList(this)»
			@ElementList(inline=true, entry="«path.childTagName()»")
			private List<«path.childClassName(this)»> «path.childFieldName(this)»s = new ArrayList<«path.childClassName(this)»>();
			
			public List<«path.childClassName(this)»> «path.childGetterName(this)»s() {
				return «path.childFieldName(this)»s;
			}
		«ELSE»
			@Element(required=false, name="«path.childTagName()»")
			private «path.childClassName(this)» «path.childFieldName(this)»;
			
			public «path.childClassName(this)» «path.childGetterName(this)»() {
				return «path.childFieldName(this)»;
			}
		«ENDIF»
	}
	«IF path.size > 2»
		«EXPAND interimClass(path.withoutFirst()) FOR this»
	«ENDIF»
«ENDDEFINE»