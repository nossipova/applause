«IMPORT org::applause::lang::applauseDsl»
«EXTENSION extensions::MetamodelExtensions»
«EXTENSION extensions::GeneratorExtensions»
«EXTENSION templates::viewmodels::GeneratorExtensions»

«DEFINE main FOR Model-»
«EXPAND viewModelLocator FOR this-»
«ENDDEFINE»

«DEFINE viewModelLocator FOR Model»
«FILE "ViewModel/ViewModelLocator.cs"-»
using GalaSoft.MvvmLight;
using «this.rootNamespace()».DataAccessLayer;

namespace «rootNamespace()».ViewModel
{
public class ViewModelLocator
    {
        public ViewModelLocator()
        {
            if (ViewModelBase.IsInDesignModeStatic)
            {
                // Create design time view models
            }
            else
            {
                // Create run time view models
                «FOREACH this.views().typeSelect(SectionedView) AS view-»
                Create«view.name.toFirstUpper()»ViewModel();
                «ENDFOREACH»
            }
        }

        public static void Cleanup()
        {
            «FOREACH this.views().typeSelect(SectionedView) AS view-»
            Clear«view.name.toFirstUpper()»ViewModel();
            «ENDFOREACH»        
        }
        
        «FOREACH this.views().typeSelect(SectionedView) AS view-»
        #region «view.name.toFirstUpper()» Property

        private static «view.name.toFirstUpper()»ViewModel _«view.name.toFirstLower()»ViewModel;
        public static «view.name.toFirstUpper()»ViewModel «view.name.toFirstUpper()»ViewModelStatic
        {
            get
            {
                if (_«view.name.toFirstLower()»ViewModel == null)
                {
                    Create«view.name.toFirstUpper()»ViewModel();
                }
                return _«view.name.toFirstLower()»ViewModel;
            }
        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance",
            "CA1822:MarkMembersAsStatic",
            Justification = "This non-static member is needed for data binding purposes.")]
        public «view.name.toFirstUpper()»ViewModel «view.name.toFirstUpper()»ViewModel
        {
            get
            {
                return «view.name.toFirstUpper()»ViewModelStatic;
            }
        }

        public static void Clear«view.name.toFirstUpper()»ViewModel()
        {
            _«view.name.toFirstLower()»ViewModel.Cleanup();
            _«view.name.toFirstLower()»ViewModel = null;
        }

        public static void Create«view.name.toFirstUpper()»ViewModel()
        {
            if (_«view.name.toFirstLower()»ViewModel == null)
            {
                _«view.name.toFirstLower()»ViewModel = new «view.name.toFirstUpper()»ViewModel(«view.bestMatchingViewCallContentProviderInstantiation()»);
            }
        }
        #endregion
        «ENDFOREACH»
    }
}
«ENDFILE»
«ENDDEFINE»