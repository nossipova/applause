«IMPORT org::applause::lang::applauseDsl»
«EXTENSION extensions::MetamodelExtensions»
«EXTENSION extensions::GeneratorExtensions»
«EXTENSION templates::viewmodels::GeneratorExtensions»

«DEFINE main FOR Model-»
«EXPAND view FOREACH this.views().typeSelect(SectionedView)-»
«ENDDEFINE»

«DEFINE view FOR SectionedView»
«FILE this.classFileFQN()-»
using System.Collections;
using System.Collections.Generic;
using Applause.ViewModel;
using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.Command;
using GalaSoft.MvvmLight.Messaging;
using Microsoft.Phone.Tasks;
using «rootNamespace()».DataAccessLayer;
using «rootNamespace()».Model;
using «rootNamespace()».Views;

namespace «namespace()»
{
    public class «className()» : ViewModelBase
    {
    	«IF this.hasContentProvider()-»
    	«this.bestMatchingViewCallContentProviderName()» _provider;
    	«ENDIF»
		public «constructorName()»(«IF this.hasContentProvider()»«this.bestMatchingViewCallContentProviderName()» provider«ENDIF»)
		{
			«IF this.hasContentProvider()»
			_provider = provider;
			«ENDIF-»
			if (IsInDesignMode)
			{
			}
			else {
				LoadData();
			}
		}
		
		#region Data Source
		private void LoadData()
		{
    	«IF this.hasContentProvider()-»
    		_provider.LoadData(AcceptData);
    	«ENDIF»
		}

        public void AcceptData(object result) 
        {
            if (result is «content.description.typeName()») 
            {
                «contentPropertyname()» = («contentTypename()»)result;
                «IF sections.size > 0-»
                MapSections(result);
                «ENDIF»
            }
        }
        
        «IF sections.size > 0-»
        private void MapSections(object result)
        {
			var grouped = new List<IEnumerable>();
			«FOREACH this.sections AS section-»
			«FOREACH section.cells AS cell-»
			«IF cell.iterator != null-»
			grouped.Add(new GroupingLayer<string, «cell.cellTypename()»>(«section.sectionTitle()», «cell.sectionCollection()»));
			«ENDIF-»
			«ENDFOREACH-»
			«ENDFOREACH-»
			Sections = grouped;        
        }
        «ENDIF»
		#endregion
		
		#region «contentPropertyname()» Property
		public const string «contentPropertyPropertyname()» = "«this.contentPropertyname()»";
		private «contentTypename()» «contentPropertyFieldname()» = null;
		public «contentTypename()» «contentPropertyname()»
		{
			get 
			{ 
				return «this.contentPropertyFieldname()»;
			}
			
			set
			{
				if («contentPropertyFieldname()» == value)
				{
					return;
				}
				«contentPropertyFieldname()» = value;
				RaisePropertyChanged(«contentPropertyPropertyname()»);
			}
		}
		#endregion
		
		#region Sections Property
        public const string SectionsProperyName = "Sections";
        List<IEnumerable> _sections = null;

        public List<IEnumerable> Sections
        {
            get
            {
                return _sections;
            }
            set
            {
                if (_sections == value)
                {
                    return;
                }

                var oldValue = _sections;
                _sections = value;

                RaisePropertyChanged(SectionsProperyName);
            }
        }
		#endregion
		
		#region Navigation
        public RelayCommand<object> NavigationCommand
        {
            get
            {
                return new RelayCommand<object>(
                	(selection) =>
                	{
					«EXPAND action FOREACH this.sections.cells.action.typeSelect(ViewCall).uniqueViewCalls()»
                	«EXPAND action FOR this.sections.cells.action.typeSelect(ExternalOpen).first()-»
                	}
				);
            }
        }
		#endregion
    }
}
«ENDFILE-»
«ENDDEFINE»

«DEFINE action FOR ViewCall»
						if (selection is «this.provider.providerTypename()»)
						{
							NavigationMessage msg = new NavigationMessage()
							{
								PageName = "«this.view.name»Page",
								ViewModelName = "«this.view.name»ViewModel"
							};
							msg.Payload.Add("«this.provider.providerPayloadSlotname()»", («this.provider.providerTypename()»)selection);
							Messenger.Default.Send<NavigationMessage>(msg);
						}
«ENDDEFINE»

«DEFINE action FOR ExternalOpen-»
						if (selection is string)
						{
							string url = (string)selection;
                        	if (url.IndexOf("tel:") == 0)
                        	{
                            	PhoneCallTask task = new PhoneCallTask();
                            	task.PhoneNumber = url.Substring("tel:".Length);
                            	task.Show();
                        	}
                        	else if (url.IndexOf("mailto:") == 0)
                        	{
                            	EmailComposeTask task = new EmailComposeTask();
                            	task.To = url.Substring("mailto:".Length);
                            	task.Show();
                        	}
                        	else
                        	{
                        		// open browser
                        	}
						}
«ENDDEFINE»