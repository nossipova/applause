grammar org.applause.lang.ApplauseDsl with org.eclipse.xtext.common.Terminals

generate applauseDsl "http://www.applause.org/lang/ApplauseDsl"

// -----------------------------------------
// General Model Structure
// -----------------------------------------

Model:
	elements += AbstractElement*
;

NamespaceDeclaration:
	'namespace' name=QualifiedName '{'
		elements+=NamespacedElement*
	'}'
;

Import:
	'uses' importedNamespace=QualifiedNameWithWildcard
;

AbstractElement:
	NamespaceDeclaration | NamespacedElement
;

NamespacedElement:
	NamedElement | Import | ScreenFlow
;

NamedElement:
	Type | Platform | Application | DataSource | View | ListItemCellDeclaration | UIComponentDeclaration
;

	
// -----------------------------------------
// Entities
// -----------------------------------------
	
Type:
	DataType | Entity
;

DataType:
	'datatype' name=ID
;

Entity:
	(abstract ?= 'abstract')? 'entity' name=ID ('extends' superEntity = [Entity|QualifiedName])? '{'
		attributes += Attribute*
	'}'
;

Attribute:
	type=[Type|QualifiedName] (many?='[]')? name=ID
;

// -----------------------------------------
// Platform specific mappings
// -----------------------------------------

Platform:
	'platform' name=ID '{'
		mappings += Mapping*
	'}'
;

QualifiedName:
	ID ('.' ID)*
;

QualifiedNameWithWildcard:
	QualifiedName '.*'?
;

Mapping:
	TypeMapping | NamespaceMapping
;

TypeMapping:
	'typemapping' type=[DataType|QualifiedName] '->' simpleName=ID ('(' namespace=QualifiedName')')? (isPrimitive?='primitive')? 
;

NamespaceMapping:
	'namespacemapping' platformIndependentName=QualifiedName '->' name=QualifiedName
;

// -----------------------------------------
// Application
// -----------------------------------------

Application:
	'application' name=ID
;


// -----------------------------------------
// Data Source
// -----------------------------------------

DataSource:
	'datasource' name=ID '{'
		outlets+=DataSourceOutlet*
	'}'
;

DataSourceOutlet:
	name=ID '(' (parameters=ParametersSpecification)? ')' ':' yields=DataSourceOutletYieldSpecification '{'
		verb=RESTVerb path=RESTURL
	'}'
;

ParametersSpecification:
	parameters+=Parameter (',' parameters+=Parameter)*
;

Parameter:
	type=[Type|QualifiedName] name=ID
;


RESTURL:
	{RESTURL} ('/' parts+=(RESTURLPart|Variable))*
;

RESTURLPart:
	{RESTURLPart} text=QualifiedName
;

Variable:
	':' parameterReference=[Parameter]
;

enum RESTVerb:
	GET | PUT | POST | DELETE
;

DataSourceOutletYieldSpecification:
	type=[Type|QualifiedName] (many?='[]')?
;



// -----------------------------------------
// Screen Flow
// -----------------------------------------

ScreenFlow:
	{ScreenFlow}
	'screenflow' '{'
		startscreen=StartScreenDefinition
	'}'
;

StartScreenDefinition:
	'startscreen' screen=[View|QualifiedName]
;


// -----------------------------------------
// UI Elements
// -----------------------------------------

View:
	ListView
;

ListView:
	'listview' name=ID '{'
		('title' '=' title=STRING)?
		('datasource' '=' datasource=DataSourceCall)?
		'sections' '{'
			sections += Section*
		'}'
	'}'	
;

Section:
	'section' (name=ID)? '{'
		('title' '=' title=STRING)?
		('datasource' '=' datasource=DataSourceCall)?
		items=SectionItems
	'}'
;

SectionItems: {SectionItems}
	'items' '{'
		items+=ListItemCell*
	'}'
;

enum LoopKind:
	for | foreach
;

ListItemCell:
	'cell' type=[ListItemCellDeclaration|QualifiedName] loop=LoopKind datasource=DataSourceOutletCall 'as' variable=ID '{'
		configurations+=UIComponentMemberConfiguration*
	'}'
;

UIComponentMemberConfiguration:
	type=UIComponentMemberCall '=' value=Expression
;

UIComponentMemberCall:
	component=[UIComponentMemberDeclaration]('.' member=[UIComponentMemberDeclaration])?
;

// TODO: 	ListItemCellDeclaration really is just a special kind of UIComponentDeclaration. Consider merging them and using a 
//			scope provider to make sure only listitemcells are valid in the context of a ListItemCell
ListItemCellDeclaration:
	'listitemcell' name=ID '{'
		members+=UIComponentMemberDeclaration*
	'}'
;

UIComponentDeclaration:
	'uicomponent' name=ID '{'
		members+=UIComponentMemberDeclaration*	
	'}'
;

UIComponentMemberDeclaration:
	type=[UIComponentOrDataType] name=ID
;

UIComponentOrDataType:
	UIComponentDeclaration | DataType
;

DataSourceCall:
	datasource=[DataSource] '(' (nestedDatasource=InnerDataSourceCall)? ')' 'as' name=ID
;

InnerDataSourceCall returns DataSourceCall:
	datasource=[DataSource] '(' (nestedDatasource=InnerDataSourceCall)? ')'
;

DataSourceOutletCall:
	datasource=[DataSourceCall] '.' outlet=[DataSourceOutlet] '(' /* TODO: add parameters */')'
;

// -----------------------------------------
// Expressions
// -----------------------------------------

Expression:
	StringLiteral | ElvisExpression
;

EntityMemberCall:
	head=[Attribute] (tail=EntityMemberCallTail)?
;

EntityMemberCallTail:
	'.' head=[Attribute] (tail=EntityMemberCallTail)?
;

AttributeReference:
	value=[Attribute]
;

StringLiteral:
	value=STRING
;

ElvisExpression:
	leftOperand=EntityMemberCall ('?:' rightOperand=EntityMemberCall)?
;